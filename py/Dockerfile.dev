# Stage 1: Builder
FROM python:3.10-slim AS builder

# Install system dependencies in a single RUN command to reduce layers
RUN apt-get update && apt-get install -y --no-install-recommends \
    gcc g++ musl-dev curl libffi-dev gfortran libopenblas-dev \
    && apt-get clean && rm -rf /var/lib/apt/lists/*

# Set working directory
WORKDIR /app

# Install Poetry
RUN pip install --no-cache-dir poetry

# Copy only dependency files first to leverage caching
COPY pyproject.toml poetry.lock /app/

# Set working directory to /app/py for dependency installation
WORKDIR /app

# Install Python dependencies without creating a virtual environment
RUN poetry config virtualenvs.create false \
    && poetry install --extras "core" --no-dev --no-root \
    && pip install --no-cache-dir gunicorn uvicorn

# Copy only the necessary application files
COPY core /app/core
COPY r2r /app/r2r
COPY r2r.toml /app/r2r.toml

# Stage 2: Final Image
FROM python:3.10-slim

# Install runtime dependencies
RUN apt-get update && apt-get install -y --no-install-recommends curl \
    && apt-get clean && rm -rf /var/lib/apt/lists/*

# Set working directory
WORKDIR /app

# Copy installed Python packages and binaries from the builder stage
COPY --from=builder /usr/local/lib/python3.10/site-packages /usr/local/lib/python3.10/site-packages
COPY --from=builder /usr/local/bin /usr/local/bin

# Copy only the necessary application files from the builder
COPY --from=builder /app/core /app/core
COPY --from=builder /app/r2r /app/r2r
COPY --from=builder /app/r2r.toml /app/r2r.toml

# Set environment variables for port and host
ARG PORT=7272
ARG HOST=0.0.0.0
ENV PORT=${PORT} HOST=${HOST}

# Expose the specified port
EXPOSE ${PORT}

# Use the exec form of CMD for better signal handling
CMD ["uvicorn", "core.main.app_entry:app", "--host", "0.0.0.0", "--port", "7272"]
