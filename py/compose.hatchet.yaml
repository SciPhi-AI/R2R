networks:
  r2r-network:
    name: r2r-network

services:
  hatchet-rabbitmq:
    image: "rabbitmq:3-management"
    hostname: "hatchet-rabbitmq"
    ports:
      - "5673:5672"
      - "15673:15672"
    environment:
      RABBITMQ_DEFAULT_USER: "user"
      RABBITMQ_DEFAULT_PASS: "password"
    volumes:
      - "hatchet_rabbitmq_data:/var/lib/rabbitmq"
      - "hatchet_rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf"
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 10s
      retries: 5
    networks:
      - r2r-network
  hatchet-create-db:
    image: postgres:latest
    command: >
      sh -c "
        set -e
        echo 'Waiting for PostgreSQL to be ready...'
        while ! pg_isready -h postgres -p 5432 -U postgres; do
          sleep 1
        done
        echo 'PostgreSQL is ready, checking if database exists...'
        if ! PGPASSWORD=${POSTGRES_PASSWORD:-postgres} psql -h postgres -p 5432 -U ${POSTGRES_USER:-postgres} -lqt | grep -qw ${HATCHET_POSTGRES_DBNAME:-hatchet}; then
          echo 'Database does not exist, creating it...'
          PGPASSWORD=${POSTGRES_PASSWORD:-postgres} createdb -h postgres -p 5432 -U ${POSTGRES_USER:-postgres} -w ${HATCHET_POSTGRES_DBNAME:-hatchet}
        else
          echo 'Database already exists, skipping creation.'
        fi
      "
    environment:
      POSTGRES_USER: "${POSTGRES_USER:-postgres}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD:-postgres}"
      POSTGRES_HOST: "${POSTGRES_HOST:-postgres}"
      POSTGRES_PORT: "${POSTGRES_PORT:-5432}"
      HATCHET_POSTGRES_DBNAME: "${HATCHET_POSTGRES_DBNAME:-hatchet}"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - r2r-network
  hatchet-migration:
    image: ghcr.io/hatchet-dev/hatchet/hatchet-migrate:latest
    environment:
      POSTGRES_USER: "${POSTGRES_USER:-postgres}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD:-postgres}"
      POSTGRES_HOST: "${POSTGRES_HOST:-postgres}"
      POSTGRES_PORT: "${POSTGRES_PORT:-5432}"
      HATCHET_POSTGRES_DBNAME: "${HATCHET_POSTGRES_DBNAME:-hatchet}"
      DATABASE_URL: "postgres://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@${POSTGRES_HOST:-postgres}:${POSTGRES_PORT:-5432}/${HATCHET_POSTGRES_DBNAME:-hatchet}?sslmode=disable"
      DATABASE_POSTGRES_PORT: "${POSTGRES_PORT:-5432}"
      DATABASE_POSTGRES_HOST: "${POSTGRES_HOST:-postgres}"
      DATABASE_POSTGRES_USERNAME: "${POSTGRES_USER:-postgres}"
      DATABASE_POSTGRES_PASSWORD: "${POSTGRES_PASSWORD:-postgres}"
      HATCHET_DATABASE_POSTGRES_DB_NAME: "${HATCHET_POSTGRES_DBNAME:-hatchet}"
    depends_on:
      hatchet-create-db:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
    networks:
      - r2r-network

  hatchet-setup-config:
    image: ghcr.io/hatchet-dev/hatchet/hatchet-admin:latest
    command: /hatchet/hatchet-admin quickstart --skip certs --generated-config-dir /hatchet/config --overwrite=false
    environment:
      POSTGRES_USER: "${POSTGRES_USER:-postgres}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD:-postgres}"
      POSTGRES_HOST: "${POSTGRES_HOST:-postgres}"
      POSTGRES_PORT: "${POSTGRES_PORT:-5432}"
      HATCHET_POSTGRES_DBNAME: "${HATCHET_POSTGRES_DBNAME:-hatchet}"
      DATABASE_URL: "postgres://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@${POSTGRES_HOST:-postgres}:${POSTGRES_PORT:-5432}/${HATCHET_POSTGRES_DBNAME:-hatchet}?sslmode=disable"
      DATABASE_POSTGRES_PORT: "${POSTGRES_PORT:-5432}"
      DATABASE_POSTGRES_HOST: "${POSTGRES_HOST:-postgres}"
      DATABASE_POSTGRES_USERNAME: "${POSTGRES_USER:-postgres}"
      DATABASE_POSTGRES_PASSWORD: "${POSTGRES_PASSWORD:-postgres}"
      HATCHET_DATABASE_POSTGRES_DB_NAME: "${HATCHET_POSTGRES_DBNAME:-hatchet}"
      SERVER_TASKQUEUE_RABBITMQ_URL: amqp://user:password@hatchet-rabbitmq:5672/
      SERVER_AUTH_COOKIE_DOMAIN: "http://host.docker.internal:7274"
      SERVER_URL: "http://host.docker.internal:7274"
      SERVER_AUTH_COOKIE_INSECURE: "t"
      SERVER_GRPC_BIND_ADDRESS: "0.0.0.0"
      SERVER_GRPC_INSECURE: "t"
      SERVER_GRPC_BROADCAST_ADDRESS: "host.docker.internal:7077"
      SERVER_GRPC_MAX_MSG_SIZE: 13421772800

    volumes:
      - hatchet_certs:/hatchet/certs
      - hatchet_config:/hatchet/config
    depends_on:
      hatchet-migration:
        condition: service_completed_successfully
      hatchet-rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - r2r-network

  hatchet-engine:
    image: ghcr.io/hatchet-dev/hatchet/hatchet-engine:latest
    command: /hatchet/hatchet-engine --config /hatchet/config
    restart: on-failure
    depends_on:
      hatchet-setup-config:
        condition: service_completed_successfully
    ports:
      - "7077:7077"
    environment:
      POSTGRES_USER: "${POSTGRES_USER:-postgres}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD:-postgres}"
      POSTGRES_HOST: "${POSTGRES_HOST:-postgres}"
      POSTGRES_PORT: "${POSTGRES_PORT:-5432}"
      HATCHET_POSTGRES_DBNAME: "${HATCHET_POSTGRES_DBNAME:-hatchet}"
      DATABASE_URL: "postgres://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@${POSTGRES_HOST:-postgres}:${POSTGRES_PORT:-5432}/${HATCHET_POSTGRES_DBNAME:-hatchet}?sslmode=disable"
      SERVER_GRPC_BROADCAST_ADDRESS: "host.docker.internal:7077"
      SERVER_GRPC_BIND_ADDRESS: "0.0.0.0"
      SERVER_GRPC_PORT: 7077
      SERVER_GRPC_INSECURE: "t"
      SERVER_GRPC_MAX_MSG_SIZE: 104857600
    volumes:
      - hatchet_certs:/hatchet/certs
      - hatchet_config:/hatchet/config
    networks:
      r2r-network:
        aliases:
          - host.docker.internal
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7077/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  hatchet-api:
    image: ghcr.io/hatchet-dev/hatchet/hatchet-api:latest
    command: /hatchet/hatchet-api --config /hatchet/config
    restart: on-failure
    depends_on:
      hatchet-setup-config:
        condition: service_completed_successfully
    environment:
      POSTGRES_USER: "${POSTGRES_USER:-postgres}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD:-postgres}"
      POSTGRES_HOST: "${POSTGRES_HOST:-postgres}"
      POSTGRES_PORT: "${POSTGRES_PORT:-5432}"
      HATCHET_POSTGRES_DBNAME: "${HATCHET_POSTGRES_DBNAME:-hatchet}"
      DATABASE_URL: "postgres://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@${POSTGRES_HOST:-postgres}:${POSTGRES_PORT:-5432}/${HATCHET_POSTGRES_DBNAME:-hatchet}?sslmode=disable"
    volumes:
      - hatchet_certs:/hatchet/certs
      - hatchet_config:/hatchet/config
    networks:
      - r2r-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.hatchet-api.rule=PathPrefix(`/api`)"
      - "traefik.http.services.hatchet-api.loadbalancer.server.port=8080"
      - "traefik.http.routers.hatchet-api.entrypoints=hatchet"

  hatchet-dashboard:
    image: ghcr.io/hatchet-dev/hatchet/hatchet-frontend:latest
    networks:
      - r2r-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.hatchet-dashboard.rule=PathPrefix(`/`)"
      - "traefik.http.services.hatchet-frontend.loadbalancer.server.port=80"
      - "traefik.http.routers.hatchet-dashboard.entrypoints=hatchet"

volumes:
  hatchet_rabbitmq_data:
  hatchet_rabbitmq.conf:
  hatchet_config:
  hatchet_certs:
  hatchet_api_key:
