ingest_files:
  openapi_extra:
    x-codeSamples:
      - lang: Python
        source: |
          from r2r import R2RClient

          client = R2RClient("http://localhost:7272")
          # when using auth, do client.login(...)

          result = client.ingest_files(
              file_paths=["pg_essay_1.html", "got.txt"],
              metadatas=[{"metadata_1":"some random metadata"}, {"metadata_2": "some other random metadata"}],
              document_ids=None
          )
      - lang: Shell
        source: |
          curl -X POST "https://api.example.com/ingest_files" \
            -H "Content-Type: multipart/form-data" \
            -H "Authorization: Bearer YOUR_API_KEY" \
            -F "file=@pg_essay_1.html;type=text/html" \
            -F "file=@got.txt;type=text/plain" \
            -F 'metadatas=[{},{}]' \
            -F 'document_ids=null'

  input_descriptions:
    files: "The list of paths of input files to ingest into the system."
    metadatas: "An optional list of JSON metadata to affix to each file"
    document_ids: "An optional list of document ids for each file. If not provided, the system will generate a unique document id via the `generate_document_id` method."
    ingestion_config: "An optional dictionary to override the default chunking configuration for the ingestion process. If not provided, the system will use the default server-side chunking configuration."
    run_with_orchestration: "Whether or not ingestion runs with orchestration, default is `True`. When set to `False`, the ingestion process will run synchronous and directly return the result."

update_files:
  openapi_extra:
    x-codeSamples:
      - lang: Python
        source: |
          from r2r import R2RClient

          client = R2RClient("http://localhost:7272")
          # when using auth, do client.login(...)

          result = client.update_files(
              file_paths=["pg_essay_1_v2.txt"],
              document_ids=["b4ac4dd6-5f27-596e-a55b-7cf242ca30aa"]
          )
      - lang: Shell
        source: |
          curl -X POST "https://api.example.com/update_files" \
            -H "Content-Type: multipart/form-data" \
            -H "Authorization: Bearer YOUR_API_KEY" \
            -F "file=@pg_essay_1_v2.txt;type=text/plain" \
            -F 'document_ids=["b4ac4dd6-5f27-596e-a55b-7cf242ca30aa"]'

  input_descriptions:
    files: "The list of paths of input files to update in the system."
    document_ids: "An optional list of document ids for each file. If not provided, the system will attempt to generate the corresponding unique from the `generate_document_id` method."
    metadatas: "An optional list of JSON metadata to affix to each file"
    ingestion_config: "JSON string for chunking configuration override"
    run_with_orchestration: "Whether or not ingestion runs with orchestration, default is `True`. When set to `False`, the ingestion process will run synchronous and directly return the result."

ingest_chunks:
  openapi_extra:
    x-codeSamples:
      - lang: Python
        source: |
          from r2r import R2RClient

          client = R2RClient("http://localhost:7272")
          # when using auth, do client.login(...)

          result = client.ingest_chunks(
            chunks=[
                {
                    "text": "Another chunk of text",
                },
                {
                    "text": "Yet another chunk of text",
                },
                {
                    "text": "A chunk of text",
                },
            ],
          )
      - lang: Shell
        source: |
          curl -X POST "https://api.example.com/ingest_chunks" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer YOUR_API_KEY" \
            -d '{
              "chunks": [
                {
                  "text": "Another chunk of text"
                },
                {
                  "text": "Yet another chunk of text"
                },
                {
                  "text": "A chunk of text"
                }
              ],
              "document_id": "b4ac4dd6-5f27-596e-a55b-7cf242ca30aa",
              "metadata": {}
            }'

  input_descriptions:
    chunks: "A list of text chunks to ingest into the system."
    document_id: "An optional document id to associate the chunks with. If not provided, a unique document id will be generated."
    metadata: "Optional JSON metadata to associate with the ingested chunks."

list_vector_indices:
  openapi_extra:
    x-codeSamples:
      - lang: Python
        source: |
          from r2r import R2RClient

          client = R2RClient("http://localhost:7272")
          # when using auth, do client.login(...)

          result = client.list_vector_indices(
              table_name="vectors",
              concurrently=False
          )
      - lang: Shell
        source: |
          curl -X GET "http://localhost:7276/v2/list_vector_indices" \
            -H "Content-Type: application/json" \
            -d '{
              "table_name": "vectors",
              "concurrently": false
            }'

  input_descriptions:
    table_name: "The name of the table to list indices for. Options: vectors, entities_document, entities_collection, communities"
    concurrently: "Whether to perform the operation concurrently"

create_vector_index:
  openapi_extra:
    x-codeSamples:
      - lang: Python
        source: |
          from r2r import R2RClient

          client = R2RClient("http://localhost:7272")
          # when using auth, do client.login(...)

          result = client.create_vector_index(
              table_name="vectors",
              index_method="hnsw",
              index_measure="cosine_distance",
              index_arguments={"m": 16, "ef_construction": 64},
              concurrently=True
          )
      - lang: Shell
        source: |
          curl -X POST "http://localhost:7276/v2/create_vector_index" \
            -H "Content-Type: application/json" \
            -d '{
              "table_name": "vectors",
              "index_method": "hnsw",
              "index_measure": "cosine_distance",
              "index_arguments": {
                "m": 16,
                "ef_construction": 64
              },
              "concurrently": true
            }'

  input_descriptions:
    table_name: "The table to create the index on. Default: vectors"
    index_method: "The indexing method to use. Options: hnsw, ivfflat, auto. Default: hnsw"
    index_measure: "Distance measure for vector comparisons. Options: cosine_distance, l2_distance, max_inner_product. Default: cosine_distance"
    index_name: "Optional custom name for the index. If not provided, one will be auto-generated"
    index_arguments: "Configuration parameters for the chosen index method. For HNSW: {m: int, ef_construction: int}. For IVFFlat: {n_lists: int}"
    concurrently: "Whether to create the index concurrently. Default: true"

delete_vector_index:
  openapi_extra:
    x-codeSamples:
      - lang: Python
        source: |
          from r2r import R2RClient

          client = R2RClient("http://localhost:7272")
          # when using auth, do client.login(...)

          result = client.delete_vector_index(
              index_name="ix_vector_cosine_ops_hnsw__20241021211541",
              table_name="vectors",
              concurrently=True
          )
      - lang: Shell
        source: |
          curl -X DELETE "http://localhost:7276/v2/delete_vector_index" \
            -H "Content-Type: application/json" \
            -d '{
              "index_name": "ix_vector_cosine_ops_hnsw__20241021211541",
              "table_name": "vectors",
              "concurrently": true
            }'

  input_descriptions:
    index_name: "The name of the index to delete"
    table_name: "The name of the table containing the index. Default: vectors"
    concurrently: "Whether to delete the index concurrently. Default: true"
